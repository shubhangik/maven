<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.mycompany.app</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>my-app</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  <profiles>
   <profile> 
   <id>production</id>  
   <activation>
    <property>
        <name>environment</name>
        <value>prod</value>
      </property>
    </activation>       
    <build>
     <plugins> 
      <plugin>
       <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.16</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
        </plugin> </plugins>
    </build> 
</profile>
<profile> 
    <id>prod_Ubantu</id>
    <activation>
      <os>
       <name>linux</name>
       <family>unix</family> 
       <arch>amd64</arch> 
       <version>3.2.5-52-generic</version>
       </os> 
      </activation> 
    <build>
     <plugins> 
      <plugin>
       <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.16</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
        </plugin> </plugins>
    </build> 
</profile>
</profiles>
</project>

<!--
1. build prifiles gives build portability means we can 
define different platform specific details in same pom so no need to change build settings for different platforms.
2. Different types of build profiles
   Per Project

   - Defined in the POM itself (pom.xml).
   Per User

   - Defined in the Maven-settings (%USER_HOME%/.m2/settings.xml).
   Global

    - Defined in the global Maven-settings (%M2_HOME%/conf/settings.xml).
    
3.Profiles can be automatically triggered based on the detected state of the build environment. 
These triggers are specified via an <activation> section in the profile itself. Currently, 
this detection is limited to prefix-matching of the JDK version, the presence of a system 
property or the value of a system property   

4. two ways to trigger profile
   -P profile_id
   <actination> block 
   
5. Profiles specified in external files (i.e in settings.xml or profiles.xml) are not portable in the strictest sense.
   you will only be able to modify the <repositories> and <pluginRepositories> sections, plus an extra <properties> section.

    The <properties> section allows you to specify free-form key-value pairs which will be included in the interpolation
     process for the POM. This allows you to specify a plugin configuration in the form of ${profile.provided.path}.   
     
6. Profiles specified in the POM can modify the following POM elements:

    <repositories>
    <pluginRepositories>
    <dependencies>
    <plugins>
    <properties> (not actually available in the main POM, but used behind the scenes)
    <modules>
    <reporting>
    <dependencyManagement>
    <distributionManagement>
    a subset of the <build> element, which consists of:
        <defaultGoal>
        <resources>
        <testResources>
        <finalName>
        
 7. Profiles listed in the <activeProfiles> tag would be activated by default every time a project use it.            




-->
